'RNG imitiating torch cuda randn on CPU. You are welcome.\n\nUsage:\n\n```\ng = Generator(seed=0)\nprint(g.randn(shape=(3, 4)))\n```\n\nExpected output:\n```\n[[-0.92466259 -0.42534415 -2.6438457   0.14518388]\n [-0.12086647 -0.57972564 -0.62285122 -0.32838709]\n [-1.07454231 -0.36314407 -1.67105067  2.26550497]]\n```\n'
import numpy as np
philox_m=[3528531795,3449720151]
philox_w=[2654435769,3144134277]
two_pow32_inv=np.array([2.3283064e-10],dtype=np.float32)
two_pow32_inv_2pi=np.array([2.3283064e-10*6.2831855],dtype=np.float32)
def uint32(x):'Converts (N,) np.uint64 array into (2, N) np.unit32 array.';return x.view(np.uint32).reshape(-1,2).transpose(1,0)
def philox4_round(counter,key):'A single round of the Philox 4x32 random number generator.';A=counter;B=uint32(A[0].astype(np.uint64)*philox_m[0]);C=uint32(A[2].astype(np.uint64)*philox_m[1]);A[0]=C[1]^A[1]^key[0];A[1]=C[0];A[2]=B[1]^A[3]^key[1];A[3]=B[0]
def philox4_32(counter,key,rounds=10):
	'Generates 32-bit random numbers using the Philox 4x32 random number generator.\n\n    Parameters:\n        counter (numpy.ndarray): A 4xN array of 32-bit integers representing the counter values (offset into generation).\n        key (numpy.ndarray): A 2xN array of 32-bit integers representing the key values (seed).\n        rounds (int): The number of rounds to perform.\n\n    Returns:\n        numpy.ndarray: A 4xN array of 32-bit integers containing the generated random numbers.\n    ';B=counter;A=key
	for C in range(rounds-1):philox4_round(B,A);A[0]=A[0]+philox_w[0];A[1]=A[1]+philox_w[1]
	philox4_round(B,A);return B
def box_muller(x,y):'Returns just the first out of two numbers generated by Boxâ€“Muller transform algorithm.';A=x*two_pow32_inv+two_pow32_inv/2;B=y*two_pow32_inv_2pi+two_pow32_inv_2pi/2;C=np.sqrt(-2.*np.log(A));D=C*np.sin(B);return D.astype(np.float32)
class Generator:
	"RNG that produces same outputs as torch.randn(..., device='cuda') on CPU"
	def __init__(A,seed):A.seed=seed;A.offset=0
	def randn(C,shape):
		'Generate a sequence of n standard normal random variables using the Philox 4x32 random number generator and the Box-Muller transform.';E=shape;A=1
		for G in E:A*=G
		D=np.zeros((4,A),dtype=np.uint32);D[0]=C.offset;D[2]=np.arange(A,dtype=np.uint32);C.offset+=1;B=np.empty(A,dtype=np.uint64);B.fill(C.seed);B=uint32(B);F=philox4_32(D,B);return box_muller(F[0],F[1]).reshape(E)