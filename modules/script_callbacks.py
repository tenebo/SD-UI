_U='callbacks_list_unets'
_T='callbacks_list_optimizers'
_S='callbacks_before_ui'
_R='callbacks_script_unloaded'
_Q='callbacks_infotext_pasted'
_P='callbacks_image_grid'
_O='callbacks_after_component'
_N='callbacks_before_component'
_M='callbacks_cfg_after_cfg'
_L='callbacks_cfg_denoised'
_K='callbacks_cfg_denoiser'
_J='callbacks_image_saved'
_I='callbacks_before_image_saved'
_H='callbacks_ui_settings'
_G='callbacks_ui_tabs'
_F='callbacks_model_loaded'
_E='callbacks_app_started'
_D='unknown file'
_C='callbacks_extra_noise'
_B='callbacks_ui_train_tabs'
_A='callbacks_on_reload'
import inspect,os
from collections import namedtuple
from typing import Optional,Dict,Any
from fastapi import FastAPI
from gradio import Blocks
from modules import errors,timer
def report_exception(c,job):errors.report(f"Error executing callback {job} for {c.script}",exc_info=True)
class ImageSaveParams:
	def __init__(A,image,p,filename,pnginfo):A.image=image;'the PIL image itself';A.p=p;'p object with processing parameters; either StandardDemoProcessing or an object with same fields';A.filename=filename;'name of file that the image would be saved to';A.pnginfo=pnginfo;"dictionary with parameters for image's PNG info data; infotext will have the key 'parameters'"
class ExtraNoiseParams:
	def __init__(A,noise,x,xi):A.noise=noise;'Random noise generated by the seed';A.x=x;'Latent representation of the image';A.xi=xi;'Noisy latent representation of the image'
class CFGDenoiserParams:
	def __init__(A,x,image_cond,sigma,sampling_step,total_sampling_steps,text_cond,text_uncond):A.x=x;'Latent image representation in the process of being denoised';A.image_cond=image_cond;'Conditioning image';A.sigma=sigma;'Current sigma noise step value';A.sampling_step=sampling_step;'Current Sampling step number';A.total_sampling_steps=total_sampling_steps;'Total number of sampling steps planned';A.text_cond=text_cond;' Encoder hidden states of text conditioning from prompt';A.text_uncond=text_uncond;' Encoder hidden states of text conditioning from negative prompt'
class CFGDenoisedParams:
	def __init__(A,x,sampling_step,total_sampling_steps,inner_model):A.x=x;'Latent image representation in the process of being denoised';A.sampling_step=sampling_step;'Current Sampling step number';A.total_sampling_steps=total_sampling_steps;'Total number of sampling steps planned';A.inner_model=inner_model;'Inner model reference used for denoising'
class AfterCFGCallbackParams:
	def __init__(A,x,sampling_step,total_sampling_steps):A.x=x;'Latent image representation in the process of being denoised';A.sampling_step=sampling_step;'Current Sampling step number';A.total_sampling_steps=total_sampling_steps;'Total number of sampling steps planned'
class UiTrainTabParams:
	def __init__(A,txt2img_preview_params):A.txt2img_preview_params=txt2img_preview_params
class ImageGridLoopParams:
	def __init__(A,imgs,cols,rows):A.imgs=imgs;A.cols=cols;A.rows=rows
ScriptCallback=namedtuple('ScriptCallback',['script','callback'])
callback_map=dict(callbacks_app_started=[],callbacks_model_loaded=[],callbacks_ui_tabs=[],callbacks_ui_train_tabs=[],callbacks_ui_settings=[],callbacks_before_image_saved=[],callbacks_image_saved=[],callbacks_extra_noise=[],callbacks_cfg_denoiser=[],callbacks_cfg_denoised=[],callbacks_cfg_after_cfg=[],callbacks_before_component=[],callbacks_after_component=[],callbacks_image_grid=[],callbacks_infotext_pasted=[],callbacks_script_unloaded=[],callbacks_before_ui=[],callbacks_on_reload=[],callbacks_list_optimizers=[],callbacks_list_unets=[])
def clear_callbacks():
	for A in callback_map.values():A.clear()
def app_started_callback(demo,app):
	for A in callback_map[_E]:
		try:A.callback(demo,app);timer.startup_timer.record(os.path.basename(A.script))
		except Exception:report_exception(A,'app_started_callback')
def app_reload_callback():
	for A in callback_map[_A]:
		try:A.callback()
		except Exception:report_exception(A,_A)
def model_loaded_callback(sd_model):
	for A in callback_map[_F]:
		try:A.callback(sd_model)
		except Exception:report_exception(A,'model_loaded_callback')
def ui_tabs_callback():
	A=[]
	for B in callback_map[_G]:
		try:A+=B.callback()or[]
		except Exception:report_exception(B,'ui_tabs_callback')
	return A
def ui_train_tabs_callback(params):
	for A in callback_map[_B]:
		try:A.callback(params)
		except Exception:report_exception(A,_B)
def ui_settings_callback():
	for A in callback_map[_H]:
		try:A.callback()
		except Exception:report_exception(A,'ui_settings_callback')
def before_image_saved_callback(params):
	for A in callback_map[_I]:
		try:A.callback(params)
		except Exception:report_exception(A,'before_image_saved_callback')
def image_saved_callback(params):
	for A in callback_map[_J]:
		try:A.callback(params)
		except Exception:report_exception(A,'image_saved_callback')
def extra_noise_callback(params):
	for A in callback_map[_C]:
		try:A.callback(params)
		except Exception:report_exception(A,_C)
def cfg_denoiser_callback(params):
	for A in callback_map[_K]:
		try:A.callback(params)
		except Exception:report_exception(A,'cfg_denoiser_callback')
def cfg_denoised_callback(params):
	for A in callback_map[_L]:
		try:A.callback(params)
		except Exception:report_exception(A,'cfg_denoised_callback')
def cfg_after_cfg_callback(params):
	for A in callback_map[_M]:
		try:A.callback(params)
		except Exception:report_exception(A,'cfg_after_cfg_callback')
def before_component_callback(component,**B):
	for A in callback_map[_N]:
		try:A.callback(component,**B)
		except Exception:report_exception(A,'before_component_callback')
def after_component_callback(component,**B):
	for A in callback_map[_O]:
		try:A.callback(component,**B)
		except Exception:report_exception(A,'after_component_callback')
def image_grid_callback(params):
	for A in callback_map[_P]:
		try:A.callback(params)
		except Exception:report_exception(A,'image_grid')
def infotext_pasted_callback(infotext,params):
	for A in callback_map[_Q]:
		try:A.callback(infotext,params)
		except Exception:report_exception(A,'infotext_pasted')
def script_unloaded_callback():
	for A in reversed(callback_map[_R]):
		try:A.callback()
		except Exception:report_exception(A,'script_unloaded')
def before_ui_callback():
	for A in reversed(callback_map[_S]):
		try:A.callback()
		except Exception:report_exception(A,'before_ui')
def list_optimizers_callback():
	A=[]
	for B in callback_map[_T]:
		try:B.callback(A)
		except Exception:report_exception(B,'list_optimizers')
	return A
def list_unets_callback():
	A=[]
	for B in callback_map[_U]:
		try:B.callback(A)
		except Exception:report_exception(B,'list_unets')
	return A
def add_callback(callbacks,fun):A=[A for A in inspect.stack()if A.filename!=__file__];B=A[0].filename if A else _D;callbacks.append(ScriptCallback(B,fun))
def remove_current_script_callbacks():
	A=[A for A in inspect.stack()if A.filename!=__file__];B=A[0].filename if A else _D
	if B==_D:return
	for C in callback_map.values():
		for D in[A for A in C if A.script==B]:C.remove(D)
def remove_callbacks_for_function(callback_func):
	for A in callback_map.values():
		for B in[A for A in A if A.callback==callback_func]:A.remove(B)
def on_app_started(callback):'register a function to be called when the ourui started, the gradio `Block` component and\n    fastapi `FastAPI` object are passed as the arguments';add_callback(callback_map[_E],callback)
def on_before_reload(callback):'register a function to be called just before the server reloads.';add_callback(callback_map[_A],callback)
def on_model_loaded(callback):'register a function to be called when the standard demo model is created; the model is\n    passed as an argument; this function is also called when the script is reloaded. ';add_callback(callback_map[_F],callback)
def on_ui_tabs(callback):'register a function to be called when the UI is creating new tabs.\n    The function must either return a None, which means no new tabs to be added, or a list, where\n    each element is a tuple:\n        (gradio_component, title, elem_id)\n\n    gradio_component is a gradio component to be used for contents of the tab (usually gr.Blocks)\n    title is tab text displayed to user in the UI\n    elem_id is HTML id for the tab\n    ';add_callback(callback_map[_G],callback)
def on_ui_train_tabs(callback):'register a function to be called when the UI is creating new tabs for the train tab.\n    Create your new tabs with gr.Tab.\n    ';add_callback(callback_map[_B],callback)
def on_ui_settings(callback):'register a function to be called before UI settings are populated; add your settings\n    by using shared.opts.add_option(shared.OptionInfo(...)) ';add_callback(callback_map[_H],callback)
def on_before_image_saved(callback):'register a function to be called before an image is saved to a file.\n    The callback is called with one argument:\n        - params: ImageSaveParams - parameters the image is to be saved with. You can change fields in this object.\n    ';add_callback(callback_map[_I],callback)
def on_image_saved(callback):'register a function to be called after an image is saved to a file.\n    The callback is called with one argument:\n        - params: ImageSaveParams - parameters the image was saved with. Changing fields in this object does nothing.\n    ';add_callback(callback_map[_J],callback)
def on_extra_noise(callback):'register a function to be called before adding extra noise in img2img or hires fix;\n    The callback is called with one argument:\n        - params: ExtraNoiseParams - contains noise determined by seed and latent representation of image\n    ';add_callback(callback_map[_C],callback)
def on_cfg_denoiser(callback):'register a function to be called in the kdiffussion cfg_denoiser method after building the inner model inputs.\n    The callback is called with one argument:\n        - params: CFGDenoiserParams - parameters to be passed to the inner model and sampling state details.\n    ';add_callback(callback_map[_K],callback)
def on_cfg_denoised(callback):'register a function to be called in the kdiffussion cfg_denoiser method after building the inner model inputs.\n    The callback is called with one argument:\n        - params: CFGDenoisedParams - parameters to be passed to the inner model and sampling state details.\n    ';add_callback(callback_map[_L],callback)
def on_cfg_after_cfg(callback):'register a function to be called in the kdiffussion cfg_denoiser method after cfg calculations are completed.\n    The callback is called with one argument:\n        - params: AfterCFGCallbackParams - parameters to be passed to the script for post-processing after cfg calculation.\n    ';add_callback(callback_map[_M],callback)
def on_before_component(callback):'register a function to be called before a component is created.\n    The callback is called with arguments:\n        - component - gradio component that is about to be created.\n        - **kwargs - args to gradio.components.IOComponent.__init__ function\n\n    Use elem_id/label fields of kwargs to figure out which component it is.\n    This can be useful to inject your own components somewhere in the middle of vanilla UI.\n    ';add_callback(callback_map[_N],callback)
def on_after_component(callback):'register a function to be called after a component is created. See on_before_component for more.';add_callback(callback_map[_O],callback)
def on_image_grid(callback):'register a function to be called before making an image grid.\n    The callback is called with one argument:\n       - params: ImageGridLoopParams - parameters to be used for grid creation. Can be modified.\n    ';add_callback(callback_map[_P],callback)
def on_infotext_pasted(callback):'register a function to be called before applying an infotext.\n    The callback is called with two arguments:\n       - infotext: str - raw infotext.\n       - result: Dict[str, any] - parsed infotext parameters.\n    ';add_callback(callback_map[_Q],callback)
def on_script_unloaded(callback):'register a function to be called before the script is unloaded. Any hooks/hijacks/monkeying about that\n    the script did should be reverted here';add_callback(callback_map[_R],callback)
def on_before_ui(callback):'register a function to be called before the UI is created.';add_callback(callback_map[_S],callback)
def on_list_optimizers(callback):'register a function to be called when UI is making a list of cross attention optimization options.\n    The function will be called with one argument, a list, and shall add objects of type modules.sd_hijack_optimizations.SdOptimization\n    to it.';add_callback(callback_map[_T],callback)
def on_list_unets(callback):'register a function to be called when UI is making a list of alternative options for unet.\n    The function will be called with one argument, a list, and shall add objects of type modules.sd_unet.SdUnetOption to it.';add_callback(callback_map[_U],callback)